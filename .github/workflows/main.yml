name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        
      - name: Get PR Diff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Получаем diff напрямую из API с правильным Accept header
          curl -s -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" > pr_diff.txt
            # Проверяем статус команды curl
          CURL_STATUS=$?
          if [ $CURL_STATUS -ne 0 ]; then
            echo "Ошибка при выполнении curl: код $CURL_STATUS"
            exit 1
          fi

          # Проверяем содержимое файла diff
          if [[ ! -s pr_diff.txt ]]; then
            echo "Ошибка: Файл pr_diff.txt пустой или отсутствует"
            
            # Получаем список файлов, измененных в PR - другой метод
            echo "Пробуем альтернативный метод получения изменений..."
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" > pr_files.json
            
            if [ -s pr_files.json ]; then
              # Создаем простой diff формат для обработки
              echo "Создан синтетический diff из списка измененных файлов" > pr_diff.txt
              jq -r '.[] | "Файл: \(.filename)\nИзменения: +\(.additions) -\(.deletions)\n\(.patch // "Нет доступного патча")\n"' pr_files.json >> pr_diff.txt
            else
              echo "Не удалось получить информацию о PR. Создаем пустой отчет."
              echo "Не удалось получить данные о изменениях в PR." > pr_diff.txt
            fi
          fi

          # Выводим первые несколько строк для отладки
          echo "Первые строки pr_diff.txt:"
          head -10 pr_diff.txt
            - name: Generate Code Review
        run: |
          # Создаем файл с обзором по умолчанию
          echo -e "## Автоматический обзор кода\n\nФайл diff был успешно получен и проанализирован." > review.txt
          
          # Генерируем обзор на основе diff файла
          if [ -s pr_diff.txt ]; then
            # Ограничиваем размер diff до разумного лимита
            head -c 50000 pr_diff.txt > pr_diff_limited.txt
            
            # Базовый анализ изменений
            echo -e "## Автоматический обзор кода\n" > review.txt
            echo -e "### Обзор изменений\n" >> review.txt
            
            # Подсчет измененных файлов и строк
            FILES_CHANGED=$(grep -c "^Файл: " pr_diff.txt || echo "0")
            LINES_ADDED=$(grep -o "+[^+]" pr_diff.txt | wc -l || echo "0")
            LINES_REMOVED=$(grep -o "-[^-]" pr_diff.txt | wc -l || echo "0")
            
            echo -e "- Изменено файлов: примерно $FILES_CHANGED" >> review.txt
            echo -e "- Добавлено строк: примерно $LINES_ADDED" >> review.txt
            echo -e "- Удалено строк: примерно $LINES_REMOVED\n" >> review.txt
            
            # Анализ типов файлов
            if grep -q "\.py" pr_diff.txt; then
              echo -e "### Анализ кода Python\n" >> review.txt
              echo -e "Обнаружены изменения в Python-файлах. Рекомендуется проверить:\n" >> review.txt
              echo -e "- Соответствие стилю кода PEP 8" >> review.txt
              echo -e "- Наличие комментариев к сложным участкам кода" >> review.txt
              echo -e "- Обработку потенциальных исключений" >> review.txt
              echo -e "- Проведение модульного тестирования для новой функциональности\n" >> review.txt
            fi
            
            if grep -q "\.md" pr_diff.txt; then
              echo -e "### Анализ документации\n" >> review.txt
              echo -e "Обнаружены изменения в Markdown-файлах. Рекомендации:\n" >> review.txt
              echo -e "- Проверьте форматирование документации" >> review.txt
              echo -e "- Убедитесь в актуальности информации" >> review.txt
              echo -e "- Проверьте ссылки на корректность\n" >> review.txt
            fi
            
            echo -e "### Итоги\n" >> review.txt
            echo -e "Пожалуйста, убедитесь, что код соответствует стандартам проекта и прошел необходимое тестирование перед слиянием.\n" >> review.txt
          else
            echo -e "## Автоматический обзор кода\n\nНе удалось проанализировать изменения. Файл diff пуст или недоступен." > review.txt
          fi
          
          # Выводим содержимое обзора для отладки
          echo "Содержимое review.txt:"
          cat review.txt
            - name: Post Review as PR Comment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Подготовка содержимого комментария (экранирование спецсимволов)
          COMMENT=$(cat review.txt || echo "## Автоматический обзор кода\n\nНе удалось сгенерировать обзор кода.")
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          
          # Создаем временный JSON файл для тела запроса
          echo "{\"body\": $(jq -Rs . <review.txt || echo '## Автоматический обзор кода\n\nНе удалось сгенерировать обзор кода.')}" > comment_payload.json
          
          # Отправляем комментарий в PR
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            --data @comment_payload.json \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments"
