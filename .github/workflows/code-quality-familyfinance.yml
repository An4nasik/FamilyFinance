name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ Python

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-checks:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    steps:
      - name: Checkout –∫–æ–¥
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy pytest coverage pytest-asyncio
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
          if [ -f app/requirements.txt ]; then
            pip install -r app/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å Flake8
        id: flake8
        continue-on-error: true
        run: |
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω–∞—Ö
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics > flake8_errors.txt || true
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è–º —Å—Ç–∏–ª—è
          flake8 app --count --max-complexity=10 --max-line-length=127 --statistics > flake8_warnings.txt || true
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Black
        id: black
        continue-on-error: true
        run: |
          # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ Python, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –≤ PR
          files_changed=$(git diff --name-only --diff-filter=ACMRT origin/main... | grep '\.py$' || echo "")
          
          if [ -n "$files_changed" ]; then
            black --check --diff $files_changed > black_output.txt || true
          else
            echo "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏" > black_output.txt
          fi
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy
        id: mypy
        continue-on-error: true
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ app
          if [ -d "app" ]; then
            mypy app --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs > mypy_output.txt || true
          else
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è app –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" > mypy_output.txt
          fi
      
      - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å pytest
        id: pytest
        continue-on-error: true
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å pytest
          if [ -d "tests" ]; then
            pytest -xvs tests > pytest_output.txt || true
          else
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" > pytest_output.txt
          fi
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        id: coverage
        continue-on-error: true
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
          if [ -d "app" ] && [ -d "tests" ]; then
            coverage run -m pytest tests
            coverage report > coverage_output.txt || true
            coverage xml
          else
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" > coverage_output.txt
          fi
      
      - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const readFileIfExists = (filename) => {
              try {
                return fs.readFileSync(filename, 'utf8').trim();
              } catch (e) {
                return '';
              }
            };
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            const flake8Errors = readFileIfExists('flake8_errors.txt');
            const flake8Warnings = readFileIfExists('flake8_warnings.txt');
            const blackOutput = readFileIfExists('black_output.txt');
            const mypyOutput = readFileIfExists('mypy_output.txt');
            const pytestOutput = readFileIfExists('pytest_output.txt');
            const coverageOutput = readFileIfExists('coverage_output.txt');
            
            // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            let report = `## üîç –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ Python

### üìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
${flake8Errors.includes('E') || flake8Errors.includes('F') ? '‚ùå' : '‚úÖ'} **–õ–∏–Ω—Ç–∏–Ω–≥ (–∫—Ä–∏—Ç–∏—á–Ω—ã–π)**: ${flake8Errors.includes('E') || flake8Errors.includes('F') ? '–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏' : '–ü—Ä–æ–π–¥–µ–Ω–æ'}
${flake8Warnings.length > 0 && !flake8Warnings.includes('No') ? '‚ö†Ô∏è' : '‚úÖ'} **–õ–∏–Ω—Ç–∏–Ω–≥ (—Å—Ç–∏–ª—å)**: ${flake8Warnings.length > 0 && !flake8Warnings.includes('No') ? '–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' : '–ü—Ä–æ–π–¥–µ–Ω–æ'}
${blackOutput.includes('would reformat') ? '‚ùå' : '‚úÖ'} **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: ${blackOutput.includes('would reformat') ? '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ü—Ä–æ–π–¥–µ–Ω–æ'}
${mypyOutput.includes('error:') ? '‚ö†Ô∏è' : '‚úÖ'} **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤**: ${mypyOutput.includes('error:') ? '–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã' : '–ü—Ä–æ–π–¥–µ–Ω–æ'}
${pytestOutput.includes('FAILED') ? '‚ùå' : '‚úÖ'} **–¢–µ—Å—Ç—ã**: ${pytestOutput.includes('FAILED') ? '–ï—Å—Ç—å –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã' : '–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã'}
${coverageOutput.includes('TOTAL') ? (parseFloat(coverageOutput.match(/TOTAL\s+\d+\s+\d+\s+(\d+)%/)?.[1] || '0') < 70 ? '‚ö†Ô∏è' : '‚úÖ') : '‚ö†Ô∏è'} **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏**: ${coverageOutput.includes('TOTAL') ? coverageOutput.match(/TOTAL\s+\d+\s+\d+\s+(\d+)%/)?.[1] + '%' : '–ù–µ –∏–∑–º–µ—Ä–µ–Ω–æ'}

`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            if (flake8Errors.includes('E') || flake8Errors.includes('F')) {
              report += `### ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ª–∏–Ω—Ç–∏–Ω–≥–∞
\`\`\`
${flake8Errors.length > 1500 ? flake8Errors.substring(0, 1500) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : flake8Errors}
\`\`\`

`;
            }
            
            if (flake8Warnings.length > 0 && !flake8Warnings.includes('No')) {
              report += `### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å—Ç–∏–ª–µ –∫–æ–¥–∞
\`\`\`
${flake8Warnings.length > 1000 ? flake8Warnings.substring(0, 1000) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : flake8Warnings}
\`\`\`

`;
            }
            
            if (blackOutput.includes('would reformat')) {
              report += `### ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
\`\`\`diff
${blackOutput.length > 1000 ? blackOutput.substring(0, 1000) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : blackOutput}
\`\`\`

`;
            }
            
            if (mypyOutput.includes('error:')) {
              report += `### ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏
\`\`\`
${mypyOutput.length > 1000 ? mypyOutput.substring(0, 1000) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : mypyOutput}
\`\`\`

`;
            }
            
            if (pytestOutput.includes('FAILED')) {
              report += `### ‚ùå –ü–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã
\`\`\`
${pytestOutput.length > 1000 ? pytestOutput.substring(0, 1000) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : pytestOutput}
\`\`\`

`;
            }
            
            if (coverageOutput.length > 0) {
              report += `### üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
\`\`\`
${coverageOutput.length > 1000 ? coverageOutput.substring(0, 1000) + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)" : coverageOutput}
\`\`\`

`;
            }
            
            report += `### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–°–ª–µ–¥—É–π—Ç–µ —Å—Ç–∏–ª—é PEP 8** –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–¥–∞
2. **–î–æ–±–∞–≤–ª—è–π—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
3. **–§–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Å Black** –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º PR
4. **–ü–æ–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞–º–∏**
5. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é** –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π

`;
            
            // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR
            const issueNumber = context.issue.number || context.payload.pull_request?.number;
            
            if (!issueNumber) {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä PR –∏–ª–∏ issue');
              return;
            }
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            const qualityComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('–û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ Python')
            );
            
            if (qualityComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: qualityComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: report
              });
            }
